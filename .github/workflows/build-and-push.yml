name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
  schedule:
    # Auto build at 2 AM every Sunday
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      update_lockfile:
        description: 'Update uv.lock file before building'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  check-version:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/version-check.yml

  update-lockfile:
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.update_lockfile == 'true' ||
      github.event.schedule &&
      github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Update lock file
      run: |
        uv lock --upgrade

    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit updated lock file
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add uv.lock
        git commit -m "chore: update uv.lock file"
        git push

  build:
    runs-on: ubuntu-latest
    needs: [check-version, update-lockfile]
    if: |
      always() &&
      (needs.update-lockfile.result == 'success' ||
      needs.update-lockfile.result == 'skipped') &&
      github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    outputs:
      image-labels: ${{ steps.meta.outputs.labels }}

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=pep440,pattern={{version}},value=${{ needs.check-version.outputs.version }}
          type=raw,value=v${{ needs.check-version.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Molecule Tox Runner
          org.opencontainers.image.description=Docker image for Ansible Molecule testing with tox (built with uv)
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: "{{defaultContext}}"
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        provenance: false # Disable provenance to avoid unknown/unknown architecture package
        build-args: |
          VERSION=${{ needs.check-version.outputs.version }}

  test:
    runs-on: ubuntu-latest
    needs: [check-version, build]
    if: |
      always() &&
      github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Docker image
      run: |
        # Debug testing platform log
        IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-version.outputs.version }}
        echo "Image to test: $IMAGE"

        echo "Testing on platform: ${{ matrix.platform }}"
        ARCH=$(docker run --rm --privileged --platform ${{ matrix.platform }} $IMAGE uname -m)
        echo "Container architecture: $ARCH"

        if [[ "${{ matrix.platform }}" == "linux/amd64" && "$ARCH" != "x86_64" ]]; then
          echo "ERROR: Expected x86_64 for amd64 platform, got $ARCH"
          exit 1
        fi

        if [[ "${{ matrix.platform }}" == "linux/arm64" && "$ARCH" != "aarch64" ]]; then
          echo "ERROR: Expected aarch64 for arm64 platform, got $ARCH"
          exit 1
        fi

        # Test basic functionality
        docker run --rm --privileged --platform ${{ matrix.platform }} $IMAGE tox --version
        docker run --rm --privileged --platform ${{ matrix.platform }} $IMAGE molecule --version
        docker run --rm --privileged --platform ${{ matrix.platform }} $IMAGE ansible-lint --version
        docker run --rm --privileged --platform ${{ matrix.platform }} $IMAGE yamllint --version

        # Test entrypoint
        docker run --rm --privileged --platform ${{ matrix.platform }} $IMAGE

  security-scan:
    permissions:
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    needs: [check-version, build]
    if: |
      always() &&
      github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Generate SBOM with Trivy
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-version.outputs.version }}
        format: cyclonedx
        output: 'sbom.cdx.json'

    - name: Upload SBOM artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.cdx.json

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-version.outputs.version }}
        format: sarif
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
